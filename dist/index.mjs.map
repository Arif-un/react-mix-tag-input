{"version":3,"sources":["../src/MixInput.tsx","../src/utils.ts","../src/TagExtension.ts","../src/index.ts"],"sourcesContent":["import './MixInput.css'\r\n\r\nimport React, { type ForwardedRef, forwardRef, useEffect, useImperativeHandle, useRef } from 'react'\r\n\r\nimport { editorValueToMixInputValue, mixInputValueToEditorValue } from './utils'\r\nimport { EditorContent, useEditor } from '@tiptap/react'\r\nimport Document from '@tiptap/extension-document'\r\nimport Paragraph from '@tiptap/extension-paragraph'\r\nimport Text from '@tiptap/extension-text'\r\nimport Placeholder from '@tiptap/extension-placeholder'\r\nimport TagExtension from './TagExtension'\r\nimport { type MixInputProps, type MixInputRef, type MixInputValue } from './MixInputType'\r\n\r\nconst DEFAULT_TAG_ATTRS = {\r\n  id: undefined,\r\n  label: undefined,\r\n  class: undefined,\r\n  style: undefined,\r\n}\r\n\r\nconst MixInput = forwardRef((props: MixInputProps, ref: ForwardedRef<MixInputRef>) => {\r\n  const {\r\n    onChange,\r\n    value,\r\n    // multiline,\r\n    // showTagDeleteBtn = false,\r\n    placeholder,\r\n    readonly = false,\r\n    tagClassName,\r\n    editorOptions,\r\n    className,\r\n    tagAttrs,\r\n    tagEventHandlers,\r\n    ...restProps\r\n  } = props\r\n\r\n  const editorRef = useRef<HTMLDivElement>(null)\r\n\r\n  const editor = useEditor({\r\n    editorProps: {\r\n      attributes: { class: `mix-input ${className}` },\r\n    },\r\n    extensions: [\r\n      Document,\r\n      Paragraph.configure({\r\n        HTMLAttributes: { class: 'mi-paragraph' },\r\n      }),\r\n      Text,\r\n      Placeholder.configure({ placeholder }),\r\n      TagExtension.configure({\r\n        tagClassName,\r\n        attrs: { ...DEFAULT_TAG_ATTRS, ...tagAttrs },\r\n        eventHandlers: tagEventHandlers,\r\n      }),\r\n    ],\r\n    onUpdate: ({ editor }) => {\r\n      onChange?.(editorValueToMixInputValue(editor?.getJSON()?.content || []))\r\n    },\r\n    ...editorOptions,\r\n  })\r\n\r\n  const insertContent = (content: MixInputValue | MixInputValue[] | MixInputValue[][]) => {\r\n    editor?.chain().focus().insertContent(content).run()\r\n  }\r\n\r\n  useEffect(() => {\r\n    let updatedValueFromParent = mixInputValueToEditorValue(value)\r\n    if (updatedValueFromParent.length === 0) {\r\n      updatedValueFromParent = [{ type: 'paragraph' }]\r\n    }\r\n    if (JSON.stringify(updatedValueFromParent) === JSON.stringify(editor?.getJSON().content)) return\r\n\r\n    editor?.commands.setContent(updatedValueFromParent)\r\n  }, [value])\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    element: editorRef.current,\r\n    editor,\r\n    insertContent,\r\n  }))\r\n\r\n  return (\r\n    <EditorContent\r\n      editor={editor}\r\n      innerRef={editorRef}\r\n      {...(restProps as Omit<typeof restProps, 'ref'>)}\r\n    />\r\n  )\r\n})\r\n\r\nexport default MixInput\r\n","\r\nimport type {  MixInputValue, MixInputValues, Tag } from './MixInputType'\r\nimport { JSONContent } from '@tiptap/core'\r\n\r\nfunction isTag(item: MixInputValue): item is Tag {\r\n  return typeof item === 'object' && item.type === 'tag'\r\n}\r\n\r\nfunction createTagObj(item: JSONContent): Tag {\r\n  return { type: 'tag', attrs: { ...item.attrs } }\r\n}\r\n\r\nexport function editorValueToMixInputValue(value: JSONContent[]) {\r\n  const mixInputValues: MixInputValues = []\r\n  value.forEach((line) => {\r\n    if (line.type === 'paragraph') {\r\n      mixInputValues.push([])\r\n      line?.content?.forEach((item) => {\r\n        if (item.type === 'text' && item.text) {\r\n          mixInputValues.at(-1)?.push(item.text)\r\n        }\r\n        if (item.type === 'tag') {\r\n          mixInputValues.at(-1)?.push(createTagObj(item))\r\n        }\r\n      })\r\n    }\r\n  })\r\n  return mixInputValues\r\n}\r\n\r\nexport function mixInputValueToEditorValue(mixInputValues: MixInputValue[] | MixInputValue[][]) {\r\n  const jsonContent: JSONContent[] = []\r\n  mixInputValues.forEach((item, i) => {\r\n    if (!Array.isArray(jsonContent[i])) {\r\n      jsonContent.push({ type: 'paragraph', content: [] })\r\n    }\r\n    const lastItem = jsonContent.at(-1)\r\n    if (typeof item === 'string' && lastItem?.content) {\r\n      lastItem.content.push({\r\n        type: 'text',\r\n        text: item,\r\n      })\r\n    }\r\n    if (!Array.isArray(item) && isTag(item) && lastItem?.content) {\r\n      lastItem.content.push({\r\n        type: 'tag',\r\n        attrs: { ...item.attrs },\r\n      })\r\n    }\r\n    if (Array.isArray(item)) {\r\n      item.forEach((subItem) => {\r\n        if (typeof subItem === 'string' && lastItem?.content) {\r\n          lastItem.content.push({\r\n            type: 'text',\r\n            text: subItem,\r\n          })\r\n        }\r\n        if (typeof subItem === 'object' && subItem.type === 'tag' && lastItem?.content) {\r\n          lastItem.content.push({\r\n            type: 'tag',\r\n            attrs: { ...subItem.attrs },\r\n          })\r\n        }\r\n      })\r\n    }\r\n  })\r\n  return jsonContent\r\n}","import { Attribute, mergeAttributes, Node } from \"@tiptap/core\";\r\n\r\nexport default Node.create({\r\n  name: \"tag\",\r\n  group: \"inline\",\r\n  inline: true,\r\n  atom: true,\r\n  selectable: false,\r\n\r\n  parseHTML() {\r\n    return [\r\n      {\r\n        tag: `span[data-type=\"${this.name}\"]`,\r\n      },\r\n    ];\r\n  },\r\n\r\n  renderHTML({ HTMLAttributes }) {\r\n    return [\"span\", mergeAttributes(HTMLAttributes)];\r\n  },\r\n\r\n\r\n  addNodeView: () => ({ node, extension }) => {\r\n    const span = document.createElement('span');\r\n    span.className = 'mi-tag'\r\n    const { label, id, class: classes, style, ...restAttrs } = node.attrs\r\n    span.innerHTML = label\r\n    span.setAttribute('data-type', 'tag')\r\n\r\n    if (id) {\r\n      span.setAttribute('data-id', id)\r\n    }\r\n\r\n    if (extension.options.tagClassName) {\r\n      span.classList.add(extension.options.tagClassName)\r\n    }\r\n\r\n    if (classes) {\r\n      if (Array.isArray(classes)) {\r\n        classes.forEach((c) => {\r\n          span.classList.add(c as string)\r\n        })\r\n      } else {\r\n        span.classList.add(classes)\r\n      }\r\n    }\r\n\r\n    if (style) {\r\n      Object.assign(span.style, style)\r\n    }\r\n\r\n    if (Object.keys(restAttrs).length) {\r\n      Object.keys(restAttrs).forEach((key) => {\r\n        span.dataset[key] = restAttrs[key]\r\n      })\r\n    }\r\n\r\n    // Add event listeners\r\n    if (extension.options.eventHandlers) {\r\n      Object.entries(extension.options.eventHandlers).forEach(([eventName, handler]) => {\r\n        span.addEventListener(eventName, handler as EventListener)\r\n      })\r\n    }\r\n\r\n    const dom = document.createElement('span')\r\n    dom.appendChild(span)\r\n    // add zero-width space to make caret visible to outside of tag\r\n    dom.appendChild(document.createTextNode('\\u200B'))\r\n\r\n    return {\r\n      dom,\r\n      destroy: () => {\r\n        if (extension.options.eventHandlers) {\r\n          Object.entries(extension.options.eventHandlers).forEach(([eventName, handler]) => {\r\n            span.removeEventListener(eventName, handler as EventListener)\r\n          })\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  addAttributes() {\r\n    const extraAttrs: Record<string, Attribute> = {}\r\n    for (const key in this.options.attrs) {\r\n      extraAttrs[key] = { default: this.options.attrs[key] }\r\n    }\r\n    return extraAttrs\r\n  }\r\n});\r\n","import MixInput from './MixInput'\r\nimport type { MixInputProps, MixInputRef, MixInputValue, MixInputValues, Tag } from './MixInputType.d'\r\nexport default MixInput\r\n\r\n\r\nexport type {\r\n  MixInputProps,\r\n  MixInputRef,\r\n  MixInputValue,\r\n  MixInputValues,\r\n  Tag\r\n}\r\n"],"mappings":"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","names":["React","forwardRef","useEffect","useImperativeHandle","useRef","isTag","item","createTagObj","editorValueToMixInputValue","value","mixInputValues","line","_a","_b","mixInputValueToEditorValue","jsonContent","i","lastItem","subItem","EditorContent","useEditor","Document","Paragraph","Text","Placeholder","mergeAttributes","Node","TagExtension_default","HTMLAttributes","node","extension","span","label","id","classes","style","restAttrs","c","key","eventName","handler","dom","extraAttrs","DEFAULT_TAG_ATTRS","MixInput","forwardRef","props","ref","onChange","value","placeholder","readonly","tagClassName","editorOptions","className","tagAttrs","tagEventHandlers","restProps","editorRef","useRef","editor","useEditor","Document","Paragraph","Text","Placeholder","TagExtension_default","_a","editorValueToMixInputValue","insertContent","content","useEffect","updatedValueFromParent","mixInputValueToEditorValue","useImperativeHandle","React","EditorContent","MixInput_default","src_default","MixInput_default"]}