{"version":3,"sources":["../src/MixInput.tsx","../src/utils.ts","../src/index.ts"],"sourcesContent":["import './MixInput.css'\r\n\r\nimport React, {\r\n  type ClipboardEvent,\r\n  type FocusEvent,\r\n  type ForwardedRef,\r\n  forwardRef,\r\n  type KeyboardEvent,\r\n  type MouseEvent,\r\n  type SyntheticEvent,\r\n  useEffect,\r\n  useId,\r\n  useImperativeHandle,\r\n  useRef,\r\n} from 'react'\r\n\r\nimport { MixInputProps, MixInputRef, MixInputValue, Tag } from './MixInputType'\r\nimport { createTagElement, isBr, isTag, MixInputValueTypes, nodesToArray, tagValueArrToString, traverseNodes, uniqueId } from './utils'\r\n\r\nconst MixInput = forwardRef((props: MixInputProps, ref: ForwardedRef<MixInputRef>) => {\r\n  const componentId = useId()\r\n  const tagsDataRef = useRef<Record<string, any>>({})\r\n  const { onChange, onClick, value, multiline, placeholder, showTagDeleteBtn = true, readonly = false, onPaste, onKeyDown, onSelect, onFocus, ...restProps } = props\r\n  const contentRef = useRef(tagValueArrToString({ componentId, tagsDataRef, valueArr: value, showTagDeleteBtn }))\r\n  const editorRef = useRef<HTMLDivElement | null>(null)\r\n  const caretPositionRef = useRef<number>(0)\r\n\r\n\r\n  useEffect(() => {\r\n    if (!editorRef.current) return\r\n    editorRef.current.innerHTML = tagValueArrToString({ componentId, tagsDataRef, valueArr: value, showTagDeleteBtn })\r\n  }, [value])\r\n\r\n  const insertContent = (newContent: MixInputValue) => {\r\n    const selection = window.getSelection()\r\n    if (!selection) {\r\n      return\r\n    }\r\n\r\n    const range = selection.getRangeAt(0)\r\n\r\n    if (range.commonAncestorContainer !== editorRef.current && range.commonAncestorContainer.parentElement !== editorRef.current) {\r\n      return\r\n    }\r\n\r\n    range.deleteContents()\r\n\r\n    let node: HTMLSpanElement | Text | null = null\r\n    if (typeof newContent === 'string') {\r\n      node = document.createTextNode(newContent)\r\n      node.textContent = newContent\r\n    } else if (isTag(newContent)) {\r\n      node = createTagElement({\r\n        componentId,\r\n        tagsDataRef,\r\n        data: newContent as Tag,\r\n        showTagDeleteBtn,\r\n      })\r\n    } else if (typeof newContent === 'object' && newContent.type === MixInputValueTypes.LINE_BREAK) {\r\n      node = document.createElement('br')\r\n    }\r\n\r\n    if (!node) {\r\n      console.error('invalid content')\r\n      return\r\n    }\r\n\r\n    range.insertNode(node)\r\n\r\n    const newRange = document.createRange()\r\n    newRange.setStartAfter(node)\r\n    newRange.setEndAfter(node)\r\n    selection.removeAllRanges()\r\n    selection.addRange(newRange)\r\n    editorRef.current?.focus()\r\n\r\n    contentRef.current = editorRef.current?.innerHTML ?? ''\r\n    const caretPostfix = (isTag(newContent) || isBr(newContent)) ? 1 : 0\r\n    caretPositionRef.current += (node?.textContent?.length || 0) + caretPostfix\r\n    onChange?.(nodesToArray(editorRef.current?.childNodes, tagsDataRef))\r\n  }\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    inputRef: editorRef.current,\r\n    insertContent,\r\n    getValue: () => nodesToArray(editorRef.current?.childNodes, tagsDataRef),\r\n  }))\r\n\r\n  const handleContentChange = () => {\r\n    if (editorRef.current) {\r\n      contentRef.current = editorRef.current.innerHTML\r\n    }\r\n    onChange?.(nodesToArray(editorRef.current?.childNodes, tagsDataRef))\r\n  }\r\n\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n    onKeyDown?.(e)\r\n\r\n    if (e.key === 'Enter' && !multiline) {\r\n      e.preventDefault()\r\n    } else if (e.key === 'Enter' && multiline) {\r\n      e.preventDefault()\r\n      insertContent({ type: 'line-break' })\r\n      return\r\n    } else if (e.key === 'Backspace') {\r\n      const { node, charCode } = getCharacterAtCaretPos(getCaretPosition())\r\n      let tagId: string | null = null\r\n      if (node?.previousSibling?.nodeName === 'SPAN') {\r\n        const tagElm = node?.previousSibling as HTMLSpanElement\r\n        tagId = tagElm.getAttribute?.('data-id')\r\n      }\r\n      // when ZeroWidthWhiteSpace detected after tag then remove the tag\r\n      if (tagId && charCode === 8203) {\r\n        e.preventDefault()\r\n        const nodeArr = nodesToArray(editorRef.current?.childNodes, tagsDataRef, true)\r\n        const { label } = nodeArr.find((item) => isTag(item) && item?.tagId === tagId) as Tag\r\n        const filterTagArr = nodeArr.filter((item) => {\r\n          if (isTag(item) && item.tagId === tagId) {\r\n            return false\r\n          }\r\n          return true\r\n        })\r\n        const nodeStr = tagValueArrToString({ valueArr: filterTagArr, componentId, showTagDeleteBtn, tagsDataRef })\r\n\r\n        if (editorRef?.current) {\r\n          editorRef.current.innerHTML = nodeStr\r\n        }\r\n        setCaret(caretPositionRef.current - label.length - 1)\r\n      }\r\n      caretPositionRef.current -= 1\r\n      return\r\n      // if (content === '<br>') {\r\n    } else if (e.key === 'ArrowLeft') {\r\n      const { node, charCode } = getCharacterAtCaretPos(caretPositionRef.current)\r\n      const tagElement = node?.previousSibling as HTMLSpanElement\r\n      const tagId = tagElement.getAttribute?.('data-id')\r\n      if (tagId && charCode === 8203) {\r\n        e.preventDefault()\r\n        const tag = editorRef.current?.querySelector(`[data-id=\"${tagId}\"]`)\r\n        setCaret(caretPositionRef.current - (tag?.textContent?.length || 0) - 1)\r\n      }\r\n      return\r\n    } else if (e.key === 'ArrowRight') {\r\n      const targetPos = caretPositionRef.current + 1\r\n      const { node } = getCharacterAtCaretPos(targetPos)\r\n      if (node?.nodeName === 'SPAN') {\r\n        e.preventDefault()\r\n        setCaret(caretPositionRef.current + (node?.textContent?.length || 0) + 1)\r\n      }\r\n      return\r\n    } else if (e.key !== 'Delete' && e.key !== 'Tab') {\r\n      caretPositionRef.current += 1\r\n    }\r\n  }\r\n\r\n  const handleClicks = (e: SyntheticEvent) => {\r\n    if (e.target instanceof HTMLButtonElement && e.target.classList.contains('mtag-delete-btn')) {\r\n      e.target?.parentElement?.remove()\r\n      onChange?.(nodesToArray(editorRef.current?.childNodes, tagsDataRef))\r\n    }\r\n    onClick?.(e as MouseEvent<HTMLDivElement>)\r\n  }\r\n\r\n  function getCaretPosition() {\r\n    let caretOffset = 0\r\n\r\n    if (window.getSelection) {\r\n      const selection = window.getSelection()\r\n\r\n      if (editorRef.current && selection?.rangeCount && selection.rangeCount > 0) {\r\n        const range = selection.getRangeAt(0)\r\n        const preCaretRange = range.cloneRange()\r\n        preCaretRange.selectNodeContents(editorRef.current)\r\n        preCaretRange.setEnd(range.endContainer, range.endOffset)\r\n        caretOffset = preCaretRange.toString().length\r\n      }\r\n    }\r\n\r\n    return caretOffset\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCaret(caretPositionRef.current)\r\n  }, [caretPositionRef.current, value])\r\n\r\n  function setCaret(pos: number) {\r\n    const targetPos = pos\r\n    if (!editorRef.current) {\r\n      return\r\n    }\r\n\r\n    const { foundNode, nodeIndex } = traverseNodes(editorRef.current, targetPos)\r\n    if (foundNode?.textContent) {\r\n      const range = document.createRange()\r\n      const sel = window.getSelection()\r\n      if (!sel) return\r\n\r\n      if (foundNode?.textContent && foundNode?.textContent.length >= targetPos - nodeIndex) {\r\n        range.setStart(foundNode, targetPos - nodeIndex)\r\n      } else {\r\n        range.setStart(foundNode, foundNode.textContent.length)\r\n      }\r\n      range.collapse(true)\r\n\r\n      sel.removeAllRanges()\r\n      sel.addRange(range)\r\n    }\r\n  }\r\n\r\n  function getCharacterAtCaretPos(pos: number) {\r\n    const targetPos = pos\r\n    const { foundNode, nodeIndex } = traverseNodes(editorRef.current, targetPos)\r\n\r\n    if (foundNode?.textContent) {\r\n      const index = targetPos - nodeIndex - 1\r\n      const char = foundNode.textContent[index]\r\n      return { charCode: char?.charCodeAt(0), node: foundNode, nodeIndex, index }\r\n    }\r\n    return {}\r\n  }\r\n\r\n\r\n  const handleSelectionChange = (e: SyntheticEvent<HTMLDivElement, Event>) => {\r\n    onSelect?.(e)\r\n    caretPositionRef.current = getCaretPosition()\r\n  }\r\n\r\n  const handlePaste = (e: ClipboardEvent<HTMLDivElement>) => {\r\n    e.preventDefault()\r\n    const clipboardData = e.clipboardData\r\n    const pastedData = clipboardData.getData('text/plain')\r\n    insertContent(pastedData)\r\n    onPaste?.(e)\r\n  }\r\n\r\n  const handleFocus = (e: FocusEvent<HTMLDivElement, Element>) => {\r\n    setCaret(caretPositionRef.current)\r\n    onFocus?.(e)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      data-placeholder={placeholder}\r\n      aria-label=\"input\"\r\n      role=\"textbox\"\r\n      tabIndex={0}\r\n      className=\"mix-tag-input\"\r\n      contentEditable={readonly ? false : true}\r\n      ref={editorRef}\r\n      onInput={handleContentChange}\r\n      onKeyDown={handleKeyDown}\r\n      onClick={handleClicks}\r\n      onSelect={handleSelectionChange}\r\n      onPaste={handlePaste}\r\n      onFocus={handleFocus}\r\n      dangerouslySetInnerHTML={{ __html: contentRef.current }}\r\n      {...(multiline ? { 'aria-multiline': true } : {})}\r\n      {...restProps}\r\n    />\r\n  )\r\n})\r\n\r\nexport default MixInput\r\n","\r\nimport { CreateTagElementParams, CreateTagParams, type MixInputValue, Tag, TagValueArrToStringParams, LineBreak } from './MixInputType'\r\n\r\nexport const DEFAULT_TAG_CLASS = 'mtag'\r\nexport const MixInputValueTypes = {\r\n  TAG: 'tag',\r\n  LINE_BREAK: 'line-break',\r\n}\r\n\r\nexport function nodesToArray(nodes: NodeList | undefined, tagsDataRef: TagValueArrToStringParams['tagsDataRef'], withId = false): MixInputValue[] {\r\n  if (!nodes) return []\r\n\r\n  const nodeArr = Array.from(nodes)\r\n  const arr: MixInputValue[] = []\r\n\r\n  for (let i = 0; i < nodeArr.length; i += 1) {\r\n    const arrItem: Node | HTMLElement = nodeArr[i]\r\n    const lastItem: MixInputValue | undefined = arr.at(-1)\r\n    if (\r\n      arrItem instanceof Node &&\r\n      arrItem.nodeName === '#text' &&\r\n      arrItem.textContent !== '\\n' &&\r\n      arrItem.textContent !== ''\r\n    ) {\r\n\r\n      const content = removeZeroWidthSpace(arrItem.textContent || '')\r\n\r\n      if (typeof lastItem === 'string') {\r\n        arr[arr.length - 1] = lastItem + content\r\n      } else {\r\n        arr.push(content || '')\r\n      }\r\n    }\r\n    if (arrItem instanceof HTMLElement && arrItem.nodeName === 'SPAN') {\r\n      const classes = arrItem?.classList?.value.replace(DEFAULT_TAG_CLASS, '').trim()\r\n      const id = arrItem?.dataset?.id || ''\r\n      arr.push({\r\n        ...(withId ? { tagId: id } : {}),\r\n        type: MixInputValueTypes.TAG,\r\n        label: arrItem.innerHTML || arrItem.innerText,\r\n        ...(classes ? { classes } : {}),\r\n        ...(tagsDataRef.current[id] ? { data: tagsDataRef.current[id] } : {}),\r\n      })\r\n    }\r\n    if (arrItem instanceof HTMLElement && arrItem.nodeName === 'BR') {\r\n      arr.push({ type: MixInputValueTypes.LINE_BREAK })\r\n    }\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nfunction removeZeroWidthSpace(str: string): string {\r\n  return str.replace(/[\\u200B]/g, '')\r\n}\r\n\r\nexport function createTag({ classes, text, id, showTagDeleteBtn }: CreateTagParams): string {\r\n  //&ZeroWidthSpace; is used to prevent the browser from collapsing multiple spaces into one\r\n  return `<span data-id=\"${id}\" class=\"${DEFAULT_TAG_CLASS} ${classes}\" contenteditable=\"false\">${text.trim()}${showTagDeleteBtn ? '<button class=\"mtag-delete-btn\" contenteditable=\"false\" tabindex=\"-1\">×</button>' : ''}</span>&ZeroWidthSpace;`\r\n}\r\n\r\nexport function tagValueArrToString({ valueArr, showTagDeleteBtn = false, tagsDataRef, componentId }: TagValueArrToStringParams): string {\r\n  if (!Array.isArray(valueArr) || valueArr.length === 0) {\r\n    return ''\r\n  }\r\n\r\n  return valueArr.reduce((acc: string, item: MixInputValue) => {\r\n    if (typeof item === 'string') {\r\n      return (acc += item)\r\n    }\r\n    if (isTag(item)) {\r\n      const { label, classes, data } = item as Tag\r\n      const id = uniqueId(componentId)\r\n      if (data) {\r\n        tagsDataRef.current[id] = data\r\n      }\r\n      return (acc += createTag({\r\n        classes: classes || '',\r\n        text: label,\r\n        id,\r\n        showTagDeleteBtn,\r\n      }))\r\n    }\r\n    if (typeof item === 'object' && item.type === 'line-break') {\r\n      return (acc += '<br>')\r\n    }\r\n    return ''\r\n  }, '')\r\n}\r\n\r\nexport function getCaretOffset(element: HTMLElement | null): number {\r\n  let caretOffset = 0\r\n  const sel = window.getSelection()\r\n\r\n  if (sel?.rangeCount && element) {\r\n    const range = sel.getRangeAt(0)\r\n    const preCaretRange = range.cloneRange()\r\n    preCaretRange.selectNodeContents(element)\r\n    preCaretRange.setEnd(range.endContainer, range.endOffset)\r\n    caretOffset = preCaretRange.toString().length\r\n  }\r\n  return caretOffset\r\n}\r\n\r\nexport function uniqueId(componentId: string) {\r\n  const dateString = Date.now().toString(36)\r\n  const randomness = Math.random().toString(36).substr(2)\r\n  return componentId + dateString + randomness\r\n}\r\n\r\nexport function createTagElement({ componentId, tagsDataRef, showTagDeleteBtn, data }: CreateTagElementParams) {\r\n  const elm = document.createElement('span')\r\n  elm.setAttribute('contentEditable', 'false')\r\n  const id = uniqueId(componentId)\r\n  elm.setAttribute('data-id', id)\r\n  elm.classList.add(DEFAULT_TAG_CLASS)\r\n  elm.innerHTML = data.label\r\n\r\n  if (data.classes) {\r\n    elm.classList.add(data.classes)\r\n  }\r\n\r\n  if (data.data) {\r\n    tagsDataRef.current[id] = data.data\r\n    elm.setAttribute('data-id', id)\r\n  }\r\n\r\n  if (showTagDeleteBtn) {\r\n    const deleteBtn = document.createElement('button')\r\n    deleteBtn.classList.add('mtag-delete-btn')\r\n    deleteBtn.setAttribute('contentEditable', 'false')\r\n    deleteBtn.setAttribute('tabIndex', '-1')\r\n    deleteBtn.innerHTML = '&times;'\r\n    elm.appendChild(deleteBtn)\r\n  }\r\n\r\n  return elm\r\n}\r\n\r\nexport function traverseNodes(elm: Element | null, targetPos: number): {\r\n  foundNode: Node | undefined\r\n  nodeIndex: number\r\n} {\r\n  if (!elm) return { foundNode: undefined, nodeIndex: 0 }\r\n  let foundNode = null\r\n  let currentPos = 0\r\n  const nodes = Array.from(elm.childNodes)\r\n\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    const node: Node | Element = nodes[i]\r\n    if (node?.textContent) {\r\n      const textLength = node.textContent.length\r\n      if (currentPos + textLength >= targetPos) {\r\n        foundNode = node\r\n        break\r\n      }\r\n      currentPos += textLength\r\n    }\r\n  }\r\n\r\n  if (!foundNode) {\r\n    foundNode = nodes.at(-1)\r\n    currentPos = foundNode?.textContent?.length || 0\r\n  }\r\n  return { foundNode, nodeIndex: currentPos }\r\n}\r\n\r\nexport function isTag(item: MixInputValue): item is Tag {\r\n  return typeof item === 'object' && item.type === MixInputValueTypes.TAG\r\n}\r\n\r\nexport function isBr(item: MixInputValue): item is LineBreak {\r\n  return typeof item === 'object' && item.type === MixInputValueTypes.LINE_BREAK\r\n}\r\n","import MixInput from './MixInput'\r\nimport type { MixInputProps, MixInputRef, MixInputValue } from './MixInputType.d'\r\nexport default MixInput\r\n\r\n\r\nexport type {\r\n  MixInputProps,\r\n  MixInputRef,\r\n  MixInputValue,\r\n}\r\n"],"mappings":"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","names":["React","forwardRef","useEffect","useId","useImperativeHandle","useRef","DEFAULT_TAG_CLASS","MixInputValueTypes","nodesToArray","nodes","tagsDataRef","withId","_a","_b","nodeArr","arr","i","arrItem","lastItem","content","removeZeroWidthSpace","classes","id","str","createTag","text","showTagDeleteBtn","tagValueArrToString","valueArr","componentId","acc","item","isTag","label","data","uniqueId","uniqueId","componentId","dateString","randomness","createTagElement","tagsDataRef","showTagDeleteBtn","data","elm","id","DEFAULT_TAG_CLASS","deleteBtn","traverseNodes","targetPos","_a","foundNode","currentPos","nodes","i","node","textLength","isTag","item","MixInputValueTypes","isBr","MixInput","forwardRef","props","ref","componentId","useId","tagsDataRef","useRef","onChange","onClick","value","multiline","placeholder","showTagDeleteBtn","readonly","onPaste","onKeyDown","onSelect","onFocus","restProps","contentRef","tagValueArrToString","editorRef","caretPositionRef","useEffect","insertContent","newContent","_a","_b","_c","_d","selection","range","node","isTag","createTagElement","MixInputValueTypes","newRange","caretPostfix","isBr","nodesToArray","useImperativeHandle","handleContentChange","handleKeyDown","_e","_f","_g","charCode","getCharacterAtCaretPos","getCaretPosition","tagId","tagElm","nodeArr","label","item","filterTagArr","nodeStr","setCaret","tagElement","tag","targetPos","handleClicks","caretOffset","preCaretRange","pos","foundNode","nodeIndex","traverseNodes","sel","index","char","React","pastedData","MixInput_default","src_default","MixInput_default"]}