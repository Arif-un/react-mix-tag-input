{"version":3,"sources":["../src/MixInput.tsx","../src/utils.ts","../src/TagExtension.ts","../src/Tag.tsx","../src/index.ts"],"sourcesContent":["import './MixInput.css'\r\n\r\nimport React, { type ForwardedRef, forwardRef, useEffect, useImperativeHandle, useRef } from 'react'\r\n\r\nimport { editorValueToMixInputValue, mixInputValueToEditorValue } from './utils'\r\nimport { EditorContent, useEditor } from '@tiptap/react'\r\nimport Document from '@tiptap/extension-document'\r\nimport Paragraph from '@tiptap/extension-paragraph'\r\nimport Text from '@tiptap/extension-text'\r\nimport Placeholder from '@tiptap/extension-placeholder'\r\nimport TagExtension from './TagExtension'\r\nimport { type MixInputProps, type MixInputRef, type MixInputValue } from './MixInputType'\r\n\r\nconst DEFAULT_TAG_ATTRS = {\r\n  id: undefined,\r\n  label: 'undefined',\r\n  className: undefined,\r\n  style: undefined,\r\n}\r\n\r\nconst MixInput = forwardRef((props: MixInputProps, ref: ForwardedRef<MixInputRef>) => {\r\n  const {\r\n    onChange,\r\n    value,\r\n    // multiline,\r\n    // showTagDeleteBtn = false,\r\n    placeholder,\r\n    readonly = false,\r\n    tagClassName,\r\n    editorOptions,\r\n    className,\r\n    tagAttrs,\r\n    tagView,\r\n    ...restProps\r\n  } = props\r\n\r\n  const editorRef = useRef<HTMLDivElement>(null)\r\n\r\n  const editor = useEditor({\r\n    editorProps: {\r\n      attributes: { class: `mix-input ${className || ''}` },\r\n    },\r\n    extensions: [\r\n      Document,\r\n      Paragraph.configure({\r\n        HTMLAttributes: { class: 'mi-paragraph' },\r\n      }),\r\n      Text,\r\n      Placeholder.configure({ placeholder }),\r\n      TagExtension.configure({\r\n        tagClassName,\r\n        attrs: { ...DEFAULT_TAG_ATTRS, ...tagAttrs },\r\n        tagView,\r\n      }),\r\n    ],\r\n    onUpdate: ({ editor }) => {\r\n      onChange?.(editorValueToMixInputValue(editor?.getJSON()?.content || []))\r\n    },\r\n    ...editorOptions,\r\n  })\r\n\r\n  const insertContent = (content: MixInputValue | MixInputValue[] | MixInputValue[][]) => {\r\n    editor?.chain().focus().insertContent(content).run()\r\n  }\r\n\r\n  useEffect(() => {\r\n    let updatedValueFromParent = mixInputValueToEditorValue(value)\r\n    if (updatedValueFromParent.length === 0) {\r\n      updatedValueFromParent = [{ type: 'paragraph' }]\r\n    }\r\n    if (JSON.stringify(updatedValueFromParent) === JSON.stringify(editor?.getJSON().content)) return\r\n\r\n    editor?.commands.setContent(updatedValueFromParent)\r\n  }, [value])\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    element: editorRef.current,\r\n    editor,\r\n    insertContent,\r\n  }))\r\n\r\n  return (\r\n    <EditorContent\r\n      editor={editor}\r\n      innerRef={editorRef}\r\n      {...(restProps as Omit<typeof restProps, 'ref'>)}\r\n    />\r\n  )\r\n})\r\n\r\nexport default MixInput\r\n","\r\nimport type {  MixInputValue, MixInputValues, Tag } from './MixInputType'\r\nimport { JSONContent } from '@tiptap/core'\r\n\r\nfunction isTag(item: MixInputValue): item is Tag {\r\n  return typeof item === 'object' && item.type === 'tag'\r\n}\r\n\r\nfunction createTagObj(item: JSONContent): Tag {\r\n  return { type: 'tag', attrs: { ...item.attrs } }\r\n}\r\n\r\nexport function editorValueToMixInputValue(value: JSONContent[]) {\r\n  const mixInputValues: MixInputValues = []\r\n  value.forEach((line) => {\r\n    if (line.type === 'paragraph') {\r\n      mixInputValues.push([])\r\n      line?.content?.forEach((item) => {\r\n        if (item.type === 'text' && item.text) {\r\n          mixInputValues.at(-1)?.push(item.text)\r\n        }\r\n        if (item.type === 'tag') {\r\n          mixInputValues.at(-1)?.push(createTagObj(item))\r\n        }\r\n      })\r\n    }\r\n  })\r\n  return mixInputValues\r\n}\r\n\r\nexport function mixInputValueToEditorValue(mixInputValues: MixInputValue[] | MixInputValue[][]) {\r\n  const jsonContent: JSONContent[] = []\r\n  mixInputValues.forEach((item, i) => {\r\n    if (!Array.isArray(jsonContent[i])) {\r\n      jsonContent.push({ type: 'paragraph', content: [] })\r\n    }\r\n    const lastItem = jsonContent.at(-1)\r\n    if (typeof item === 'string' && lastItem?.content) {\r\n      lastItem.content.push({\r\n        type: 'text',\r\n        text: item,\r\n      })\r\n    }\r\n    if (!Array.isArray(item) && isTag(item) && lastItem?.content) {\r\n      lastItem.content.push({\r\n        type: 'tag',\r\n        attrs: { ...item.attrs },\r\n      })\r\n    }\r\n    if (Array.isArray(item)) {\r\n      item.forEach((subItem) => {\r\n        if (typeof subItem === 'string' && lastItem?.content) {\r\n          lastItem.content.push({\r\n            type: 'text',\r\n            text: subItem,\r\n          })\r\n        }\r\n        if (typeof subItem === 'object' && subItem.type === 'tag' && lastItem?.content) {\r\n          lastItem.content.push({\r\n            type: 'tag',\r\n            attrs: { ...subItem.attrs },\r\n          })\r\n        }\r\n      })\r\n    }\r\n  })\r\n  return jsonContent\r\n}","import { Attribute, mergeAttributes, Node } from \"@tiptap/core\";\r\nimport { ReactNodeViewRenderer } from \"@tiptap/react\";\r\nimport Tag from \"./Tag\";\r\n\r\nexport default Node.create({\r\n  name: \"tag\",\r\n  group: \"inline\",\r\n  inline: true,\r\n  atom: true,\r\n  selectable: false,\r\n\r\n  parseHTML() {\r\n    return [\r\n      {\r\n        tag: `span[data-type=\"${this.name}\"]`,\r\n      },\r\n    ]\r\n  },\r\n\r\n  renderHTML({ HTMLAttributes }) {\r\n    return [\"span\", mergeAttributes(HTMLAttributes)];\r\n  },\r\n\r\n  addNodeView() {\r\n    return ReactNodeViewRenderer(Tag)\r\n  },\r\n\r\n  addAttributes() {\r\n    const extraAttrs: Record<string, Attribute> = {}\r\n    for (const key in this.options.attrs) {\r\n      extraAttrs[key] = { default: this.options.attrs[key] }\r\n    }\r\n    return extraAttrs\r\n  },\r\n})\r\n","import { type NodeViewProps, NodeViewWrapper } from '@tiptap/react'\r\nimport React from 'react'\r\n\r\nexport default function Tag(props: NodeViewProps) {\r\n  const { tagView, tagClassName } = props.extension.options\r\n  const { label, ...restAttrs } = props.node.attrs\r\n  return (\r\n    <>\r\n      <NodeViewWrapper className={`mi-tag ${tagClassName || ''}`} data-type=\"tag\" as=\"span\">\r\n        {tagView ? tagView(props) : <span {...restAttrs}>{label}</span>}\r\n      </NodeViewWrapper>\r\n      {'\\u200B'}\r\n    </>\r\n  )\r\n}\r\n","import MixInput from './MixInput'\r\nimport { editorValueToMixInputValue, mixInputValueToEditorValue } from './utils'\r\nimport type { MixInputProps, MixInputRef, MixInputValue, MixInputValues, Tag } from './MixInputType.d'\r\nexport default MixInput\r\nexport { editorValueToMixInputValue, mixInputValueToEditorValue }\r\n\r\nexport type {\r\n  MixInputProps,\r\n  MixInputRef,\r\n  MixInputValue,\r\n  MixInputValues,\r\n  Tag\r\n}\r\n"],"mappings":"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","names":["React","forwardRef","useEffect","useImperativeHandle","useRef","isTag","item","createTagObj","editorValueToMixInputValue","value","mixInputValues","line","_a","_b","mixInputValueToEditorValue","jsonContent","lastItem","subItem","EditorContent","useEditor","Document","Paragraph","Text","Placeholder","mergeAttributes","Node","ReactNodeViewRenderer","NodeViewWrapper","React","Tag","props","tagView","tagClassName","label","restAttrs","TagExtension_default","Node","HTMLAttributes","mergeAttributes","ReactNodeViewRenderer","Tag","extraAttrs","key","DEFAULT_TAG_ATTRS","MixInput","forwardRef","props","ref","onChange","value","placeholder","readonly","tagClassName","editorOptions","className","tagAttrs","tagView","restProps","editorRef","useRef","editor","useEditor","Document","Paragraph","Text","Placeholder","TagExtension_default","_a","editorValueToMixInputValue","insertContent","content","useEffect","updatedValueFromParent","mixInputValueToEditorValue","useImperativeHandle","React","EditorContent","MixInput_default","src_default","MixInput_default"]}