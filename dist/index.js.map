{"version":3,"sources":["../src/index.ts","../src/MixInput.tsx","../src/utils.ts"],"sourcesContent":["import MixInput from './MixInput'\r\nimport type { MixInputProps, MixInputRef, MixInputValue } from './MixInputType.d'\r\nexport default MixInput\r\n\r\n\r\nexport type {\r\n  MixInputProps,\r\n  MixInputRef,\r\n  MixInputValue,\r\n}\r\n","import './MixInput.css'\r\n\r\nimport React, {\r\n  type ForwardedRef,\r\n  forwardRef,\r\n  type KeyboardEvent,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n} from 'react'\r\n\r\nimport type { MixInputProps, MixInputRef, MixInputValue } from './MixInputType'\r\nimport { DEFAULT_TAG_CLASS, nodesToArray, tagValueArrToString } from './utils'\r\n\r\nconst MixInput = forwardRef((props: MixInputProps, ref: ForwardedRef<MixInputRef>) => {\r\n  const { onChange, value, multiline, ...restProps } = props\r\n  const contentRef = useRef(tagValueArrToString(value))\r\n  const editorRef = useRef<HTMLDivElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!editorRef.current) return\r\n    editorRef.current.innerHTML = tagValueArrToString(value)\r\n  }, [value])\r\n\r\n  const insertContent = (newContent: MixInputValue) => {\r\n    const selection = window.getSelection()\r\n    if (!selection) {\r\n      return\r\n    }\r\n    const range = selection.getRangeAt(0)\r\n    range.deleteContents()\r\n\r\n    let node\r\n    if (typeof newContent === 'string') {\r\n      node = document.createTextNode(newContent)\r\n      node.textContent = newContent\r\n    } else if (typeof newContent === 'object' && newContent.type === 'tag') {\r\n      node = document.createElement('span')\r\n      node.classList.add(DEFAULT_TAG_CLASS)\r\n      if (newContent.classes) {\r\n        node.classList.add(newContent.classes)\r\n      }\r\n      node.setAttribute('contentEditable', 'false')\r\n      node.innerHTML = newContent.label\r\n    }\r\n\r\n    if (!node) {\r\n      console.error('invalid content')\r\n      return\r\n    }\r\n\r\n    range.insertNode(node)\r\n    const newRange = document.createRange()\r\n    newRange.setStartAfter(node)\r\n    newRange.setEndAfter(node)\r\n    selection.removeAllRanges()\r\n    selection.addRange(newRange)\r\n    editorRef.current?.focus()\r\n\r\n    contentRef.current = editorRef.current?.innerHTML ?? ''\r\n    onChange?.(nodesToArray(editorRef.current?.childNodes))\r\n  }\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    inputRef: editorRef.current,\r\n    insertContent,\r\n    getValue: () => nodesToArray(editorRef.current?.childNodes),\r\n  }))\r\n\r\n  const handleContentChange = () => {\r\n    if (editorRef.current) {\r\n      contentRef.current = editorRef.current.innerHTML\r\n    }\r\n    onChange?.(nodesToArray(editorRef.current?.childNodes))\r\n  }\r\n\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n    if (e.key === 'Enter' && !multiline) {\r\n      e.preventDefault()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      aria-label=\"input\"\r\n      role=\"textbox\"\r\n      tabIndex={0}\r\n      className=\"mix-tag-input\"\r\n      contentEditable={true}\r\n      ref={editorRef}\r\n      onInput={handleContentChange}\r\n      onKeyDown={handleKeyDown}\r\n      dangerouslySetInnerHTML={{ __html: contentRef.current }}\r\n      {...(multiline ? { 'aria-multiline': true } : {})}\r\n      {...restProps}\r\n    />\r\n  )\r\n})\r\n\r\nexport default MixInput\r\n","import { type MixInputValue } from './MixInputType'\r\n\r\nexport const DEFAULT_TAG_CLASS = 'mtag'\r\n\r\nexport function nodesToArray(nodes: NodeList | undefined): MixInputValue[] {\r\n  if (!nodes) return []\r\n\r\n  const nodeArr = Array.from(nodes)\r\n  const arr: MixInputValue[] = []\r\n\r\n  for (let i = 0; i < nodeArr.length; i += 1) {\r\n    const arrItem: Node | HTMLElement = nodeArr[i]\r\n    const lastItem: MixInputValue | undefined = arr.at(-1)\r\n    if (\r\n      arrItem instanceof Node &&\r\n      arrItem.nodeName === '#text' &&\r\n      arrItem.textContent !== '\\n' &&\r\n      arrItem.textContent !== ''\r\n    ) {\r\n      if (typeof lastItem === 'string') {\r\n        arr[arr.length - 1] = lastItem + arrItem.textContent\r\n      } else {\r\n        arr.push(arrItem.textContent || '')\r\n      }\r\n    }\r\n    if (arrItem instanceof HTMLElement && arrItem.nodeName === 'SPAN') {\r\n      const classes = arrItem?.classList?.value.replace(DEFAULT_TAG_CLASS, '').trim()\r\n      arr.push({\r\n        type: 'tag',\r\n        label: arrItem.innerHTML || arrItem.innerText,\r\n        ...(classes ? { classes } : {}),\r\n      })\r\n    }\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nexport function tagValueArrToString(valueArr: MixInputValue[] | undefined): string {\r\n  if (!Array.isArray(valueArr) || valueArr.length === 0) {\r\n    return ''\r\n  }\r\n\r\n  return valueArr.reduce((acc: string, item: MixInputValue) => {\r\n    if (typeof item === 'string') {\r\n      return (acc += item)\r\n    }\r\n    if (typeof item === 'object') {\r\n      const { label, classes } = item\r\n      return (acc += `<span class=\"${DEFAULT_TAG_CLASS} ${classes || ''\r\n        }\" contenteditable=\"false\">${label}</span>`)\r\n    }\r\n    return ''\r\n  }, '')\r\n}\r\n\r\nexport function getCaretOffset(element: HTMLElement | null): number {\r\n  let caretOffset = 0\r\n  const sel = window.getSelection()\r\n\r\n  if (sel?.rangeCount && element) {\r\n    const range = sel.getRangeAt(0)\r\n    const preCaretRange = range.cloneRange()\r\n    preCaretRange.selectNodeContents(element)\r\n    preCaretRange.setEnd(range.endContainer, range.endOffset)\r\n    caretOffset = preCaretRange.toString().length\r\n  }\r\n  return caretOffset\r\n}\r\n"],"mappings":"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","names":["src_exports","__export","src_default","__toCommonJS","import_react","DEFAULT_TAG_CLASS","nodesToArray","nodes","_a","nodeArr","arr","arrItem","lastItem","classes","tagValueArrToString","valueArr","acc","item","label","MixInput","props","ref","onChange","value","multiline","restProps","contentRef","tagValueArrToString","editorRef","insertContent","newContent","_a","_b","_c","selection","range","node","DEFAULT_TAG_CLASS","newRange","nodesToArray","React","e","MixInput_default","src_default","MixInput_default"]}