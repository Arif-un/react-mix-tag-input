{"version":3,"sources":["../src/index.ts","../src/MixInput.tsx","../src/utils.ts"],"sourcesContent":["import MixInput from './MixInput'\r\nimport type { MixInputProps, MixInputRef, MixInputValue, MixInputValues, Tag } from './MixInputType.d'\r\nexport default MixInput\r\n\r\n\r\nexport type {\r\n  MixInputProps,\r\n  MixInputRef,\r\n  MixInputValue,\r\n  MixInputValues,\r\n  Tag\r\n}\r\n","import './MixInput.css'\r\n\r\nimport React, {\r\n  type FocusEvent,\r\n  type FormEvent,\r\n  type ForwardedRef,\r\n  forwardRef,\r\n  type KeyboardEvent,\r\n  type SyntheticEvent,\r\n  useId,\r\n  useImperativeHandle,\r\n  useLayoutEffect,\r\n  useRef,\r\n  useState,\r\n} from 'react'\r\n\r\nimport * as MixInputType from './MixInputType'\r\nimport {\r\n  createHtmlContent,\r\n  ELEMENT_NODE,\r\n  getCaretInfo,\r\n  getCaretPosition,\r\n  isZeroWidthSpace,\r\n  nodesToArray,\r\n  removeZeroWidthSpace,\r\n  setCaretPosition,\r\n  split,\r\n  stripHtml,\r\n  tagValueArrToString,\r\n} from './utils'\r\n\r\nconst MixInput = forwardRef(\r\n  (props: MixInputType.MixInputProps, ref: ForwardedRef<MixInputType.MixInputRef>) => {\r\n    const {\r\n      onChange,\r\n      onInput,\r\n      onKeyDown,\r\n      onSelect,\r\n      onFocus,\r\n      value,\r\n      // multiline,\r\n      placeholder,\r\n      showTagDeleteBtn = false,\r\n      readonly = false,\r\n      tagClassName = 'mtag',\r\n      ...restProps\r\n    } = props\r\n\r\n    const componentId = useId()\r\n    const [content, setContent] = useState('')\r\n    const editorRef = useRef<HTMLDivElement | null>(null)\r\n    const [caretPos, setCaretPos] = useState(999)\r\n\r\n    if (value === undefined || value === null) {\r\n      console.error('[MixInput] should have value prop but got undefined')\r\n    }\r\n\r\n    if (onChange === undefined) {\r\n      console.error('[MixInput] should have onChange prop but got undefined')\r\n    }\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      element: editorRef.current,\r\n      caretPosition: caretPos,\r\n      insertContent,\r\n    }))\r\n\r\n    useLayoutEffect(() => {\r\n      updateContentAndCaret({\r\n        triggerOnchange: false,\r\n        newHtmlContent: tagValueArrToString({\r\n          valueArr: value,\r\n          showTagDeleteBtn,\r\n          tagClassName,\r\n        }),\r\n      })\r\n    }, [value, tagClassName, showTagDeleteBtn, tagValueArrToString])\r\n\r\n    useLayoutEffect(() => {\r\n      setCaretPosition(editorRef.current, caretPos)\r\n    }, [caretPos])\r\n\r\n    const updateContentAndCaret = ({\r\n      newHtmlContent,\r\n      triggerOnchange = true,\r\n    }: {\r\n      newHtmlContent?: string\r\n      triggerOnchange?: boolean\r\n    } = {}) => {\r\n      const element = editorRef.current\r\n      if (!element) return\r\n      const isHtmlContentPassed = newHtmlContent !== undefined\r\n      const newContent = isHtmlContentPassed ? createHtmlContent(newHtmlContent) : element.innerHTML\r\n      const newContentText = isHtmlContentPassed\r\n        ? stripHtml(newContent)\r\n        : stripHtml(element.textContent || '')\r\n      const isZeroWidthSpaceRemovedFromFirst =\r\n        isHtmlContentPassed && isZeroWidthSpace(content.charAt(1))\r\n\r\n      let updatedCaret = stripHtml(newContentText).length - stripHtml(content).length\r\n\r\n      {\r\n        /**\r\n         * input start with text node with some text and end with\r\n         * text node with one character and second-last node is a tag,\r\n         * when remove last character then caret jump to first character\r\n         * to avoid this we check if last char is zerowidthspace and caret is at end\r\n         * then we increase caret by 1\r\n         */\r\n        const isNewContentEndWithZeroWidthSpace = isZeroWidthSpace(\r\n          newContentText.charAt(newContentText.length - 1),\r\n        )\r\n        const isCaretAtEnd = caretPos === newContentText.length - 1\r\n        if (isNewContentEndWithZeroWidthSpace && isCaretAtEnd) {\r\n          updatedCaret += 1\r\n        }\r\n      }\r\n\r\n      if (isZeroWidthSpaceRemovedFromFirst) {\r\n        updatedCaret = 1\r\n      }\r\n\r\n      const isEndWithTag = newContent.endsWith('</span>')\r\n\r\n      let updatedContent = newContent\r\n\r\n      if (isEndWithTag) {\r\n        updatedContent += '&ZeroWidthSpace;'\r\n      }\r\n\r\n      if (updatedContent.length - updatedCaret < 0) {\r\n        updatedCaret = 0\r\n      }\r\n\r\n      setCaretPos((prev) => {\r\n        if (updatedContent.length + updatedCaret < 0) {\r\n          return 0\r\n        }\r\n        return prev + updatedCaret\r\n      })\r\n\r\n      setContent(updatedContent)\r\n\r\n      if (triggerOnchange) {\r\n        onChange?.(nodesToArray(editorRef.current?.childNodes, tagClassName))\r\n      }\r\n    }\r\n\r\n    const handleSelectionChange = (e: SyntheticEvent<HTMLDivElement, Event>) => {\r\n      onSelect?.(e)\r\n      const newCaretPos = getCaretPosition(editorRef.current)\r\n      if (typeof newCaretPos === 'number') {\r\n        setCaretPos(newCaretPos)\r\n      }\r\n    }\r\n\r\n    const handleKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n      const key = e.key\r\n      const { endNode: currentNode, endOffset: currentOffset } = getCaretInfo(editorRef.current)\r\n      const previousNode = currentNode?.previousSibling\r\n      const nextNode = currentNode?.nextSibling\r\n      const zerowidthspaceLength = 1\r\n\r\n      if (\r\n        key === 'ArrowLeft' &&\r\n        currentNode &&\r\n        previousNode &&\r\n        isZeroWidthSpace(currentNode.textContent?.at(currentOffset - 1))\r\n      ) {\r\n        e.preventDefault()\r\n        const previousNodeIsBr = previousNode.nodeName === 'BR'\r\n        const previousNodeIsSpan = previousNode.nodeName === 'SPAN'\r\n\r\n        if (previousNodeIsBr) {\r\n          setCaretPos((prv) => prv - 1)\r\n        }\r\n\r\n        if (previousNodeIsSpan) {\r\n          setCaretPos(\r\n            (prev) => prev - ((previousNode?.textContent?.length || 0) + zerowidthspaceLength),\r\n          )\r\n        }\r\n      }\r\n\r\n      if (\r\n        key === 'ArrowRight' &&\r\n        currentNode &&\r\n        nextNode &&\r\n        isZeroWidthSpace(currentNode.textContent?.at(currentOffset))\r\n      ) {\r\n        e.preventDefault()\r\n\r\n        const nextNodeIsBr = nextNode.nodeName === 'BR'\r\n        const nextNodeIsSpan = nextNode.nodeName === 'SPAN'\r\n\r\n        if (nextNodeIsBr) {\r\n          setCaretPos((prv) => prv + 1)\r\n        }\r\n\r\n        if (nextNodeIsSpan) {\r\n          setCaretPos((prev) => {\r\n            return prev + (previousNode?.textContent?.length || 0) + zerowidthspaceLength\r\n          })\r\n        }\r\n      }\r\n\r\n      if (\r\n        key === 'Backspace' &&\r\n        currentNode &&\r\n        isZeroWidthSpace(currentNode.textContent?.at(currentOffset - 1)) &&\r\n        currentNode.previousSibling?.nodeType === ELEMENT_NODE &&\r\n        editorRef.current\r\n      ) {\r\n        e.preventDefault()\r\n\r\n        editorRef.current.removeChild(currentNode.previousSibling)\r\n        currentNode.textContent = removeZeroWidthSpace(currentNode?.textContent || '')\r\n        updateContentAndCaret()\r\n      }\r\n\r\n      if (key === 'Enter') {\r\n        e.preventDefault()\r\n        // if (multiline) {\r\n        //   insertContent({ type: 'line-break' })\r\n        // }\r\n      }\r\n      onKeyDown?.(e)\r\n    }\r\n\r\n    const handleFocus = (e: FocusEvent<HTMLDivElement, Element>) => {\r\n      setCaretPosition(editorRef.current, caretPos)\r\n      onFocus?.(e)\r\n    }\r\n\r\n    const handleOnInput = (e: FormEvent<HTMLDivElement>) => {\r\n      updateContentAndCaret()\r\n\r\n      onInput?.(e)\r\n    }\r\n\r\n    function insertContent(content: MixInputType.MixInputValue | MixInputType.MixInputValue[]) {\r\n      const newContentHTML = tagValueArrToString({\r\n        tagClassName,\r\n        showTagDeleteBtn,\r\n        valueArr: Array.isArray(content) ? content : [content],\r\n      })\r\n\r\n      const { endNode, endOffset } = getCaretInfo(editorRef.current)\r\n\r\n      const isChildNodesEmpty = endNode === editorRef.current\r\n\r\n      if (!editorRef.current || !endNode || endNode == null) return\r\n      if (endNode === null) return\r\n\r\n      const [leftStr, rightStr] = split(endNode.textContent || '', endOffset)\r\n      const leftTextNode = document.createTextNode(leftStr)\r\n      const rightTextNode = document.createTextNode(rightStr)\r\n\r\n      const fragment = document.createDocumentFragment()\r\n      const tempElm = document.createElement('DIV')\r\n\r\n      tempElm.innerHTML = newContentHTML\r\n\r\n      fragment.append(leftTextNode)\r\n      Array.from(tempElm.childNodes).map((node) => fragment.append(node))\r\n      fragment.append(rightTextNode)\r\n\r\n      fragment.normalize()\r\n\r\n      if (isChildNodesEmpty) {\r\n        editorRef.current.append(fragment)\r\n      } else {\r\n        editorRef.current.replaceChild(fragment, endNode)\r\n      }\r\n\r\n      updateContentAndCaret()\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div\r\n          key={`${componentId}-mix-input`}\r\n          data-placeholder={placeholder}\r\n          aria-label=\"input\"\r\n          role=\"textbox\"\r\n          tabIndex={0}\r\n          className=\"mix-tag-input\"\r\n          contentEditable={readonly ? false : true}\r\n          ref={editorRef}\r\n          onInput={handleOnInput}\r\n          onKeyDown={handleKeyDown}\r\n          onSelect={handleSelectionChange}\r\n          onFocus={handleFocus}\r\n          dangerouslySetInnerHTML={{ __html: content }}\r\n          // {...(multiline ? { 'aria-multiline': true } : {})}\r\n          {...restProps}\r\n        />\r\n      </>\r\n    )\r\n  },\r\n)\r\n\r\nexport default MixInput\r\n","import { type HTMLProps } from 'react'\r\n\r\nimport type { CreateTagParams, MixInputValue, Tag, TagValueArrToStringParams } from './MixInputType'\r\n\r\nexport const ELEMENT_NODE = 1\r\nconst TEXT_NODE = 3\r\n\r\nexport const MixInputValueTypes = {\r\n  TAG: 'tag',\r\n  LINE_BREAK: 'line-break',\r\n} as const\r\n\r\nexport function isTag(item: MixInputValue): item is Tag {\r\n  return typeof item === 'object' && item.type === MixInputValueTypes.TAG\r\n}\r\n\r\nexport function findPossibleCaretSetNodeAndIndex(elm: Element, targetPosition: number): {\r\n  node: ChildNode | undefined\r\n  nodeIndex: number | undefined\r\n  possibleCaretIndex: number | undefined\r\n} {\r\n  const nodesArr = Array.from(elm.childNodes)\r\n  const isNegativeTargetPosition = targetPosition < 0\r\n  if (!elm) {\r\n    return {\r\n      possibleCaretIndex: undefined,\r\n      node: undefined,\r\n      nodeIndex: undefined,\r\n    }\r\n  }\r\n\r\n  if (isNegativeTargetPosition) {\r\n    return {\r\n      possibleCaretIndex: 0,\r\n      node: isNegativeTargetPosition ? nodesArr[0] : undefined,\r\n      nodeIndex: isNegativeTargetPosition ? nodesArr.length : undefined,\r\n    }\r\n  }\r\n\r\n  const isCaretPositionBeforeZeroWidthSpace = isZeroWidthSpace(nodesArr[0]?.textContent) && targetPosition === 0\r\n\r\n  if (isCaretPositionBeforeZeroWidthSpace) {\r\n    return {\r\n      node: nodesArr.at(0),\r\n      possibleCaretIndex: 1,\r\n      nodeIndex: 0,\r\n    }\r\n  }\r\n\r\n  let currentContentLength = 0\r\n  let previousNodesContentLength = 0\r\n\r\n  for (let i = 0; i < nodesArr.length; i++) {\r\n    const node = nodesArr[i]\r\n\r\n    if (node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {\r\n      console.error('invalid child node')\r\n      continue\r\n    }\r\n\r\n    currentContentLength += node.textContent?.length || 0\r\n\r\n    if (node.nodeType === TEXT_NODE && currentContentLength >= targetPosition) {\r\n      return {\r\n        node,\r\n        possibleCaretIndex: targetPosition - previousNodesContentLength,\r\n        nodeIndex: i,\r\n      }\r\n    }\r\n\r\n    if (node.nodeType === ELEMENT_NODE && currentContentLength >= targetPosition) {\r\n      const nextTextNodeIsZeroWidthSpace = isZeroWidthSpace(nodesArr[i + 1]?.textContent)\r\n      return {\r\n        node: nodesArr[i + 1],\r\n        possibleCaretIndex: nextTextNodeIsZeroWidthSpace ? 1 : 0,\r\n        nodeIndex: i + 1,\r\n      }\r\n    }\r\n\r\n    previousNodesContentLength += node.textContent?.length || 0\r\n  }\r\n\r\n  return {\r\n    node: nodesArr.at(-1),\r\n    nodeIndex: nodesArr.length - 1,\r\n    possibleCaretIndex: nodesArr.at(-1)?.textContent?.length || 0,\r\n  }\r\n}\r\n\r\nfunction objToHtmlAttr(obj: HTMLProps<HTMLSpanElement>): string {\r\n  const keys = Object.keys(obj)\r\n  if (!keys.length) return ''\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  return keys.reduce((acc, key) => acc += `${key}=\"${(obj as any)[key]}\" `, '')\r\n}\r\n\r\nexport function createTag({ props, tagClassName, showTagDeleteBtn }: CreateTagParams): string {\r\n  const { label, type, class: classes, ...restProps } = props\r\n  if (type !== 'tag') return ''\r\n\r\n  //&ZeroWidthSpace; is used to prevent the browser from collapsing multiple spaces into one\r\n  return `<span class=\"${tagClassName || ''} ${classes || ''}\" ${objToHtmlAttr(restProps)}contenteditable=\"false\">${label.trim()}${showTagDeleteBtn ? '<button class=\"mtag-delete-btn\" contenteditable=\"false\" tabindex=\"-1\">×</button>' : ''}</span>`\r\n}\r\n\r\nexport function isZeroWidthSpace(char: string | undefined | null) {\r\n  if (char === undefined || char === null || char === '') return false\r\n  return char.charCodeAt(0) === 8203\r\n}\r\n\r\nexport function removeZeroWidthSpace(str: string): string {\r\n  return str.replace(/[\\u200B]/g, '')\r\n}\r\n\r\nexport function setCaretPosition(elm: Element | null, targetCaretPos: number, isBrPlaced: boolean = false) {\r\n  if (!elm) return\r\n  let { node, possibleCaretIndex } = findPossibleCaretSetNodeAndIndex(elm, targetCaretPos)\r\n  console.log('caret set target and possible', { targetCaretPos, possibleCaretIndex, node })\r\n  if (isBrPlaced && node?.nextSibling?.nodeName === 'BR') {\r\n    node = node?.nextSibling.nextSibling || undefined\r\n    possibleCaretIndex = 0\r\n  }\r\n\r\n  const range = document.createRange()\r\n  const sel = window.getSelection()\r\n  if (!sel || !node || possibleCaretIndex === undefined) return\r\n\r\n  range.setStart(node, possibleCaretIndex)\r\n  range.collapse(true)\r\n  sel.removeAllRanges()\r\n  sel.addRange(range)\r\n}\r\n\r\nexport function getCaretInfo(element: HTMLElement | null) {\r\n  const caretInfo = {\r\n    range: undefined,\r\n    isCaretInSameNode: undefined,\r\n    endOffset: undefined,\r\n    startOffset: undefined,\r\n    startNode: undefined,\r\n    endNode: undefined,\r\n  }\r\n  if (!element || !window.getSelection) return caretInfo\r\n\r\n  const selection = window.getSelection()\r\n\r\n  if (element && selection?.rangeCount && selection.rangeCount > 0) {\r\n    const range = selection.getRangeAt(0)\r\n    return {\r\n      range,\r\n      isCaretInSameNode: range.endContainer === range.startContainer,\r\n      endOffset: range.endOffset,\r\n      startOffset: range.startOffset,\r\n      startNode: range.startContainer,\r\n      endNode: range.endContainer,\r\n    }\r\n  }\r\n  return caretInfo\r\n}\r\n\r\nexport function stripHtml(html: string) {\r\n  const div = document.createElement('DIV')\r\n  div.innerHTML = html\r\n  return div.textContent || div.innerText || ''\r\n}\r\n\r\nexport function createHtmlContent(contentStr: string) {\r\n  const div = document.createElement('div')\r\n  div.innerHTML = contentStr\r\n  return div.innerHTML\r\n}\r\n\r\nexport function getCaretPosition(element: HTMLElement | null) {\r\n  let caretOffset = 0\r\n\r\n  if (window.getSelection) {\r\n    const selection = window.getSelection()\r\n\r\n    if (element && selection?.rangeCount && selection.rangeCount > 0) {\r\n      const range = selection.getRangeAt(0)\r\n      const preCaretRange = range.cloneRange()\r\n      preCaretRange.selectNodeContents(element)\r\n      preCaretRange.setEnd(range.endContainer, range.endOffset)\r\n      caretOffset = preCaretRange.toString().length\r\n    } else {\r\n      return\r\n    }\r\n  } else {\r\n    return\r\n  }\r\n\r\n  return caretOffset\r\n}\r\n\r\nexport function tagValueArrToString({ tagClassName, valueArr, showTagDeleteBtn = false }: TagValueArrToStringParams): string {\r\n  if (!Array.isArray(valueArr)) {\r\n    console.error('[MixTagInput] Wrong value provided')\r\n    return ''\r\n  }\r\n  if (!valueArr.length) return ''\r\n  console.log('tag value to html')\r\n  return valueArr.reduce((acc: string, item: MixInputValue, i: number) => {\r\n\r\n    if (typeof item === 'string') {\r\n      return (acc += item)\r\n    }\r\n    if (isTag(item)) {\r\n      const isFirstItemIsTag = i === 0\r\n      const isLastItemIsTag = i === valueArr.length - 1\r\n      const isPreviousItemIsTag = i > 0 && isTag(valueArr[i - 1])\r\n\r\n      if (isFirstItemIsTag || isPreviousItemIsTag) {\r\n        acc += '&ZeroWidthSpace;'\r\n      }\r\n\r\n      acc += createTag({\r\n        props: item,\r\n        showTagDeleteBtn,\r\n        tagClassName,\r\n      })\r\n\r\n      acc += isLastItemIsTag ? '&ZeroWidthSpace;' : ''\r\n\r\n      console.log('==========================', acc)\r\n      return acc\r\n    }\r\n    if (typeof item === 'object' && item.type === 'line-break') {\r\n      // return (acc += '<br>&ZeroWidthSpace;')\r\n      return (acc += '<br>')\r\n    }\r\n    return ''\r\n  }, '')\r\n}\r\n\r\n\r\nexport function nodesToArray(nodes: NodeList | undefined, tagClassName: string = ''): MixInputValue[] {\r\n  if (!nodes) return []\r\n\r\n  const nodeArr = Array.from(nodes)\r\n  const arr: MixInputValue[] = []\r\n\r\n  for (let i = 0; i < nodeArr.length; i += 1) {\r\n    const arrItem: Node | HTMLElement = nodeArr[i]\r\n    const lastItem: MixInputValue | undefined = arr.at(-1)\r\n    if (\r\n      arrItem.nodeType === TEXT_NODE &&\r\n      arrItem instanceof Node &&\r\n      arrItem.textContent !== '\\n' &&\r\n      arrItem.textContent !== '' &&\r\n      removeZeroWidthSpace(arrItem.textContent || '') !== ''\r\n    ) {\r\n      const content = removeZeroWidthSpace(arrItem.textContent || '')\r\n\r\n      if (typeof lastItem === 'string') {\r\n        arr[arr.length - 1] = lastItem + content\r\n      } else {\r\n        arr.push(content || '')\r\n      }\r\n    }\r\n    if (arrItem.nodeType === ELEMENT_NODE && arrItem instanceof HTMLElement && arrItem.nodeName === 'SPAN') {\r\n      const attrs: { [key: string]: string } = {}\r\n\r\n      for (let i = 0; i < arrItem.attributes.length; i++) {\r\n        const attr = arrItem.attributes[i]\r\n\r\n        if (attr.nodeName === 'class') {\r\n          const classes = attr.nodeValue?.replaceAll(new RegExp(tagClassName, 'g'), '').trim()\r\n          if (classes === '') {\r\n            continue\r\n          } else if (classes) {\r\n            attrs[attr.nodeName] = classes\r\n            continue\r\n          }\r\n        }\r\n        if (attr.nodeName === 'contenteditable') {\r\n          continue\r\n        }\r\n        if (attr.nodeName && attr.nodeValue) {\r\n          attrs[attr.nodeName] = attr.nodeValue\r\n        }\r\n      }\r\n\r\n      arr.push({\r\n        type: MixInputValueTypes.TAG,\r\n        label: arrItem.textContent || '',\r\n        ...attrs,\r\n      })\r\n    }\r\n\r\n    if (arrItem instanceof HTMLElement && arrItem.nodeName === 'BR') {\r\n      arr.push({ type: MixInputValueTypes.LINE_BREAK })\r\n    }\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\n\r\nexport function split(str: string, index: number) {\r\n  const result = [str.slice(0, index), str.slice(index)]\r\n\r\n  return result\r\n}\r\n"],"mappings":"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","names":["src_exports","__export","src_default","__toCommonJS","import_react","ELEMENT_NODE","TEXT_NODE","MixInputValueTypes","isTag","item","findPossibleCaretSetNodeAndIndex","elm","targetPosition","_a","_b","_c","_d","_e","_f","nodesArr","isNegativeTargetPosition","isZeroWidthSpace","currentContentLength","previousNodesContentLength","i","node","nextTextNodeIsZeroWidthSpace","objToHtmlAttr","obj","keys","acc","key","createTag","props","tagClassName","showTagDeleteBtn","label","type","classes","restProps","char","removeZeroWidthSpace","str","setCaretPosition","targetCaretPos","isBrPlaced","possibleCaretIndex","range","sel","getCaretInfo","element","caretInfo","selection","stripHtml","html","div","createHtmlContent","contentStr","getCaretPosition","caretOffset","preCaretRange","tagValueArrToString","valueArr","isFirstItemIsTag","isLastItemIsTag","isPreviousItemIsTag","nodesToArray","nodes","nodeArr","arr","arrItem","lastItem","content","attrs","attr","split","index","MixInput","props","ref","onChange","onInput","onKeyDown","onSelect","onFocus","value","placeholder","showTagDeleteBtn","readonly","tagClassName","restProps","componentId","content","setContent","editorRef","caretPos","setCaretPos","insertContent","updateContentAndCaret","tagValueArrToString","setCaretPosition","newHtmlContent","triggerOnchange","_a","element","isHtmlContentPassed","newContent","createHtmlContent","newContentText","stripHtml","isZeroWidthSpaceRemovedFromFirst","isZeroWidthSpace","updatedCaret","isNewContentEndWithZeroWidthSpace","isCaretAtEnd","isEndWithTag","updatedContent","prev","nodesToArray","handleSelectionChange","e","newCaretPos","getCaretPosition","handleKeyDown","_b","_c","_d","key","currentNode","currentOffset","getCaretInfo","previousNode","nextNode","zerowidthspaceLength","previousNodeIsBr","previousNodeIsSpan","prv","nextNodeIsBr","nextNodeIsSpan","ELEMENT_NODE","removeZeroWidthSpace","handleFocus","handleOnInput","newContentHTML","endNode","endOffset","isChildNodesEmpty","leftStr","rightStr","split","leftTextNode","rightTextNode","fragment","tempElm","node","React","MixInput_default","src_default","MixInput_default"]}