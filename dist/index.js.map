{"version":3,"sources":["../src/index.ts","../src/MixInput.tsx","../src/utils.ts","../src/TagExtension.ts"],"sourcesContent":["import MixInput from './MixInput'\r\nimport type { MixInputProps, MixInputRef, MixInputValue, MixInputValues, Tag } from './MixInputType.d'\r\nexport default MixInput\r\n\r\n\r\nexport type {\r\n  MixInputProps,\r\n  MixInputRef,\r\n  MixInputValue,\r\n  MixInputValues,\r\n  Tag\r\n}\r\n","import './MixInput.css'\r\n\r\nimport React, { type ForwardedRef, forwardRef, useEffect, useImperativeHandle, useRef } from 'react'\r\n\r\nimport { editorValueToMixInputValue, mixInputValueToEditorValue } from './utils'\r\nimport { EditorContent, useEditor } from '@tiptap/react'\r\nimport Document from '@tiptap/extension-document'\r\nimport Paragraph from '@tiptap/extension-paragraph'\r\nimport Text from '@tiptap/extension-text'\r\nimport Placeholder from '@tiptap/extension-placeholder'\r\nimport TagExtension from './TagExtension'\r\nimport { type MixInputProps, type MixInputRef, type MixInputValue } from './MixInputType'\r\n\r\nconst MixInput = forwardRef((props: MixInputProps, ref: ForwardedRef<MixInputRef>) => {\r\n  const {\r\n    onChange,\r\n    value,\r\n    // multiline,\r\n    // showTagDeleteBtn = false,\r\n    placeholder,\r\n    readonly = false,\r\n    tagClassName,\r\n    editorOptions,\r\n    className,\r\n    ...restProps\r\n  } = props\r\n\r\n  const editorRef = useRef<HTMLDivElement>(null)\r\n\r\n  const editor = useEditor({\r\n    editorProps: { attributes: { class: `mix-input ${className}`, ...(restProps as any) } },\r\n    extensions: [\r\n      Document,\r\n      Paragraph.configure({\r\n        HTMLAttributes: { class: 'mi-paragraph' },\r\n      }),\r\n      Text,\r\n      Placeholder.configure({ placeholder }),\r\n      TagExtension.configure({\r\n        tagClassName,\r\n      }),\r\n    ],\r\n    onUpdate: ({ editor }) => {\r\n      onChange?.(editorValueToMixInputValue(editor?.getJSON()?.content || []))\r\n    },\r\n    ...editorOptions,\r\n  })\r\n\r\n  const insertContent = (content: MixInputValue | MixInputValue[] | MixInputValue[][]) => {\r\n    editor?.chain().focus().insertContent(content).run()\r\n  }\r\n\r\n  useEffect(() => {\r\n    let updatedValueFromParent = mixInputValueToEditorValue(value)\r\n    if (updatedValueFromParent.length === 0) {\r\n      updatedValueFromParent = [{ type: 'paragraph' }]\r\n    }\r\n    if (JSON.stringify(updatedValueFromParent) === JSON.stringify(editor?.getJSON().content)) return\r\n\r\n    editor?.commands.setContent(updatedValueFromParent)\r\n  }, [value])\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    element: editorRef.current,\r\n    editor: editor,\r\n    insertContent,\r\n  }))\r\n\r\n  return <EditorContent editor={editor} innerRef={editorRef} />\r\n})\r\n\r\nexport default MixInput\r\n","\r\nimport type {  MixInputValue, MixInputValues, Tag } from './MixInputType'\r\nimport { JSONContent } from '@tiptap/core'\r\n\r\nfunction isTag(item: MixInputValue): item is Tag {\r\n  return typeof item === 'object' && item.type === 'tag'\r\n}\r\n\r\nfunction createTagObj(item: JSONContent): Tag {\r\n  return { type: 'tag', attrs: { ...item.attrs } }\r\n}\r\n\r\nexport function editorValueToMixInputValue(value: JSONContent[]) {\r\n  const mixInputValues: MixInputValues = []\r\n  value.forEach((line) => {\r\n    if (line.type === 'paragraph') {\r\n      mixInputValues.push([])\r\n      line?.content?.forEach((item) => {\r\n        if (item.type === 'text' && item.text) {\r\n          mixInputValues.at(-1)?.push(item.text)\r\n        }\r\n        if (item.type === 'tag') {\r\n          mixInputValues.at(-1)?.push(createTagObj(item))\r\n        }\r\n      })\r\n    }\r\n  })\r\n  return mixInputValues\r\n}\r\n\r\nexport function mixInputValueToEditorValue(mixInputValues: MixInputValue[] | MixInputValue[][]) {\r\n  const jsonContent: JSONContent[] = []\r\n  mixInputValues.forEach((item, i) => {\r\n    if (!Array.isArray(jsonContent[i])) {\r\n      jsonContent.push({ type: 'paragraph', content: [] })\r\n    }\r\n    const lastItem = jsonContent.at(-1)\r\n    if (typeof item === 'string' && lastItem?.content) {\r\n      lastItem.content.push({\r\n        type: 'text',\r\n        text: item,\r\n      })\r\n    }\r\n    if (!Array.isArray(item) && isTag(item) && lastItem?.content) {\r\n      lastItem.content.push({\r\n        type: 'tag',\r\n        attrs: { ...item.attrs },\r\n      })\r\n    }\r\n    if (Array.isArray(item)) {\r\n      item.forEach((subItem) => {\r\n        if (typeof subItem === 'string' && lastItem?.content) {\r\n          lastItem.content.push({\r\n            type: 'text',\r\n            text: subItem,\r\n          })\r\n        }\r\n        if (typeof subItem === 'object' && subItem.type === 'tag' && lastItem?.content) {\r\n          lastItem.content.push({\r\n            type: 'tag',\r\n            attrs: { ...subItem.attrs },\r\n          })\r\n        }\r\n      })\r\n    }\r\n  })\r\n  return jsonContent\r\n}","import { mergeAttributes, Node } from \"@tiptap/core\";\r\n\r\nexport default Node.create({\r\n  name: \"tag\",\r\n  group: \"inline\",\r\n  inline: true,\r\n  atom: true,\r\n  selectable: false,\r\n\r\n  parseHTML() {\r\n    return [\r\n      {\r\n        tag: `span[data-type=\"${this.name}\"]`,\r\n      },\r\n    ];\r\n  },\r\n\r\n  renderHTML({ HTMLAttributes }) {\r\n    return [\"span\", mergeAttributes(HTMLAttributes)];\r\n  },\r\n\r\n\r\n  addNodeView: () => ({ node, extension }) => {\r\n    const span = document.createElement('span');\r\n    span.className = 'mi-tag'\r\n    span.innerHTML = node.attrs.label\r\n    // span.setAttribute('contenteditable', 'false');\r\n    span.setAttribute('data-type', 'tag')\r\n\r\n    if (node.attrs.id) {\r\n      span.setAttribute('data-id', node.attrs.id)\r\n    }\r\n\r\n    if (extension.options.tagClassName) {\r\n      span.classList.add(extension.options.tagClassName)\r\n    }\r\n\r\n    if (node.attrs.class) {\r\n      if (Array.isArray(node.attrs.class)) {\r\n        node.attrs.class.forEach((c) => {\r\n          span.classList.add(c as string)\r\n        })\r\n      } else {\r\n        span.classList.add(node.attrs.class)\r\n      }\r\n    }\r\n\r\n    if (node.attrs.style) {\r\n      Object.assign(span.style, node.attrs.style)\r\n    }\r\n\r\n    const dom = document.createElement('span')\r\n    dom.appendChild(span)\r\n    // add zero-width space to make caret visible to outside of tag\r\n    dom.appendChild(document.createTextNode('\\u200B'))\r\n\r\n    return { dom }\r\n  },\r\n\r\n  addAttributes() {\r\n    return { label: undefined, id: undefined, class: undefined, style: undefined };\r\n  }\r\n});\r\n"],"mappings":"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","names":["src_exports","__export","src_default","__toCommonJS","import_react","isTag","item","createTagObj","editorValueToMixInputValue","value","mixInputValues","line","_a","_b","mixInputValueToEditorValue","jsonContent","i","lastItem","subItem","import_react","import_extension_document","import_extension_paragraph","import_extension_text","import_extension_placeholder","import_core","TagExtension_default","HTMLAttributes","node","extension","span","c","dom","MixInput","props","ref","onChange","value","placeholder","readonly","tagClassName","editorOptions","className","restProps","editorRef","editor","Document","Paragraph","Text","Placeholder","TagExtension_default","_a","editorValueToMixInputValue","insertContent","content","updatedValueFromParent","mixInputValueToEditorValue","React","MixInput_default","src_default","MixInput_default"]}